-------------------------------------------------------
---                                                ----
--- Author: Khanh                                  ----
--- Date: August 20th, 2022                        ----
--- Version: 1.0                                   ----
---                                                ----
---                                                ----
-------------------------------------------------------

/*
 * --- General Rules ---
 * Use underscore_names instead of camelCase/PascalCase
 * Table names should be plural
 * Spell out id fields (item_id instead of id)
 * Don't use ambiguous column names
 * Name foreign key columns the same as the columns they refer to
 */

CREATE TABLE MessAccounts
(
    account_id   NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (account_id >= 0),
    first_name   VARCHAR2(50) NOT NULL,
    last_name    VARCHAR2(50) NOT NULL,
    username     VARCHAR2(50) NOT NULL UNIQUE,
    email        VARCHAR2(100) NOT NULL UNIQUE,
    password     VARCHAR2(50) DEFAULT NULL,
    address      VARCHAR2(50) DEFAULT NULL,
    phone        VARCHAR2(50) DEFAULT NULL,
    title        VARCHAR2(50) DEFAULT NULL,
    bio          VARCHAR2(50) DEFAULT NULL,
    enabled      NUMBER(1) DEFAULT 0 check (enabled in (0,1)),
    non_locked   NUMBER(1) DEFAULT 1 check (non_locked in (0,1)),
    using_mfa    NUMBER(1) DEFAULT 0 check (using_mfa in (0,1)),
    created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login_date TIMESTAMP,
    last_login_date_display TIMESTAMP,
    image_url    VARCHAR2(255) DEFAULT 'https://freesvg.org/img/abstract-user-flat-1.png '
);

CREATE TABLE Roles
(
    role_id     NUMBER(2,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (role_id >= 0),
    role_name   VARCHAR2(50) NOT NULL UNIQUE ,
    permission  VARCHAR2(255) NOT NULL  -- user:read,user:delete,customer:read
);

CREATE TABLE AccountRoles
(
    account_role_id   NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (account_role_id >= 0),
    account_id        NUMBER(10,0) NOT NULL check (account_id >= 0) UNIQUE ,
    role_id           NUMBER(10,0) NOT NULL check (role_id >= 0),
    FOREIGN KEY (account_id) REFERENCES MessAccounts (account_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES Roles (role_id)
);

CREATE TABLE Events
(
    event_id      NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (event_id >= 0),
    type          VARCHAR2(50) NOT NULL UNIQUE check ( type in ('LOGIN_ATTEMPT','LOGIN_ATTEMPT_FAILURE',
                                                             'LOGIN_ATTEMPT_SUCCESS','PROFILE_UPDATE',
                                                             'PROFILE_PICTURE_UPDATE','ROLE_UPDATE',
                                                             'ACCOUNT_SETTING_UPDATE','PASSWORD_UPDATE','MFA_UPDATE') ),
    description   VARCHAR2(255) NOT NULL
);

CREATE TABLE UserEvents
(
    user_event_id   NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (user_event_id >= 0),
    account_id      NUMBER(10,0) NOT NULL check (account_id >= 0) ,
    event_id        NUMBER(10,0) NOT NULL check (event_id >= 0),
    device          VARCHAR2(100) DEFAULT NULL,
    ip_address      VARCHAR2(100) DEFAULT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_id) REFERENCES MessAccounts (account_id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES Events (event_id)
);

CREATE TABLE AccountVerifications
(
    account_verification_id   NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (account_verification_id >= 0),
    account_id                NUMBER(10,0) NOT NULL check (account_id >= 0) UNIQUE ,
    url                       VARCHAR2(255) NOT NULL UNIQUE ,
    expiration_date                      TIMESTAMP DEFAULT CURRENT_TIMESTAMP + interval '1' day,
    FOREIGN KEY (account_id) REFERENCES MessAccounts (account_id) ON DELETE CASCADE
);

CREATE TABLE ResetPasswordVerifications
(
    reset_password_verification_id   NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (reset_password_verification_id >= 0),
    account_id                       NUMBER(10,0) NOT NULL check (account_id >= 0) UNIQUE ,
    url                              VARCHAR2(255) NOT NULL UNIQUE ,
    expiration_date                  TIMESTAMP DEFAULT CURRENT_TIMESTAMP + interval '2' hour,
    FOREIGN KEY (account_id) REFERENCES MessAccounts (account_id) ON DELETE CASCADE
);

CREATE TABLE TwoFactorVerifications
(
    two_factor_verification_id   NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY check (two_factor_verification_id >= 0),
    account_id                   NUMBER(10,0) NOT NULL check (account_id >= 0) UNIQUE ,
    code                         VARCHAR2(10) NOT NULL UNIQUE ,
    expiration_date              TIMESTAMP DEFAULT CURRENT_TIMESTAMP + interval '15' minute ,
    FOREIGN KEY (account_id) REFERENCES MessAccounts (account_id) ON DELETE CASCADE
);

CREATE OR REPLACE TRIGGER trg_account_id_update
    AFTER UPDATE OF account_id ON MessAccounts
    FOR EACH ROW
    BEGIN
        UPDATE ResetPasswordVerifications e SET e.account_id = :new.account_id
        WHERE e.account_id = :old.account_id;

        UPDATE AccountRoles a SET a.account_id = :new.account_id
        WHERE a.account_id = :old.account_id;

        UPDATE UserEvents u SET u.account_id = :new.account_id
        WHERE u.account_id = :old.account_id;

        UPDATE AccountVerifications t SET t.account_id = :new.account_id
        WHERE t.account_id = :old.account_id;

        UPDATE TwoFactorVerifications v SET v.account_id = :new.account_id
        WHERE v.account_id = :old.account_id;
    END;
/

CREATE OR REPLACE TRIGGER trg_role_id_update
    AFTER UPDATE OF role_id ON Roles
    FOR EACH ROW
BEGIN
    UPDATE AccountRoles t SET t.role_id = :new.role_id
    WHERE t.role_id = :old.role_id;
END;
/

CREATE OR REPLACE TRIGGER trg_event_id_update
    AFTER UPDATE OF event_id ON Events
    FOR EACH ROW
BEGIN
    UPDATE UserEvents t SET t.event_id = :new.event_id
    WHERE t.event_id = :old.event_id;
END;




