spring:
  application:
    name: livechat
  data:
    mongodb:
      authentication-database: admin
      username: root
      password: root
      host: localhost
      port: 27017
      database: livechat
#      uri: mongodb://khanh:khanh@localhost:27017/livechat?authSource=admin
  web:
    resources:
      add-mappings: false
  kafka:
#    producer:
#      bootstrap-servers: localhost:9092
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      retries: 1
#      acks: -1
#      properties:
#        idempotence: true
#        max.in.flight.requests.per.connection: 5
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
#      group-id: live-chat-group
      bootstrap-servers: localhost:9092
      properties:
        spring.json.trusted.packages: '*'
        spring.json.value.default.type: 'com.khanh.livechat.model.dto.UserKafkaEvent'
#        "[spring.json.value.default.type]": "com.khanh.livechat.model.dto.HttpResponse"
  docker:
    compose:
      enabled: false

server:
  port: 8089
logging:
  level:
    org:
      springframework:
        messaging: TRACE
        web:
          socket: TRACE
